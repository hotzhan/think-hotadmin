<?php
/**
 * User: admin
 * Date: 2024/1/19
 */


namespace app\common\controller;

use app\BaseController;
use hot\auth\Auth;
use think\App;
use think\exception\HttpResponseException;
use think\facade\View;
use think\Response;
use think\response\Json;

class Base extends BaseController
{
    /**
     * 无需登录的方法,同时也就不需要鉴权了
     * @var array
     */
    protected $noNeedLogin = [];

    /**
     * 无需鉴权的方法,但需要登录
     * @var array
     */
    protected $noNeedRight = [];

    protected Auth $auth;

    protected string $controller;
    protected string $action;

    public function __construct(App $app)
    {
        parent::__construct($app);
        $this->initialize();
    }
    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->auth = Auth::instance();

        $this->controller = str_replace('._', '/',parse_name( request()->controller()) );
        $this->action = strtolower(request()->action());
    }

    protected function result(string $msg='', int $code = 500, $data = [], string $url = URL_CURRENT, bool $isPjax = true, int $wait = 3, array $header = [], array $option = []) : Json
    {
        $rdata = [
            'msg'   => $msg,
            'code'  => $code,
            'data'  => empty($data) ? (object)$data : $data,
            'url'   => $url,
            'ispjax'   => $isPjax,
            'wait' => $wait,
        ];

        return \json($rdata, 200, $header, $option);
    }
    protected function success(string $msg = '操作成功', int $code = 200,$data = [], string $url = URL_CURRENT, bool $isPjax = true, int $wait = 0, array $header = [], array $option = []) : Json
    {
        return $this->result($msg, $code,$data,  _url($url), $isPjax, $wait, $header, $option);
    }

    protected function error(string $msg = '操作失败', int $code = 500,$data = [], string $url = URL_CURRENT, bool $isPjax = true, int $wait = 0, array $header = [], array $option = []) : Json
    {
        return $this->result($msg, $code, $data, _url($url), $isPjax , $wait, $header, $option);
    }

    public function redirect($url)
    {
        throw new HttpResponseException(redirect(_url($url)));
    }

    protected function _error(string $msg = '操作失败', int $code = 0, array $data = [], string $url = '', int $wait = 3, array $header = [])
    {
        $result = [
            'code' => $code,
            'msg'  => $msg,
            'data' => $data,
            'url'  => $url,
            'wait' => $wait,
        ];
        //方法1：
        //View::assign($result);
        //throw new \think\exception\HttpException($code, $msg);//根据code匹配模板，app.php里要设置对应的http_exception_template状态码模板

        //方法2：
        if($this->request->isAjax())
        {
            $type = 'json';
        }
        else
        {
            $result = View::fetch(config('app.dispatch_error_template'), $result);
            $type = 'html';
        }
        $response = Response::create($result, $type)->header($header);
        throw new HttpResponseException($response);
    }
}