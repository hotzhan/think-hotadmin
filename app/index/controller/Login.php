<?php
/**
 * User: hotadmin
 * Date: 2024/2/23
 * Site: https://www.hotadmin.cn
 */


namespace app\index\controller;

use app\index\logic\Login as LoginLogic;
use hotzhan\verifycode\mail\MailVerifyCode;
use hotzhan\verifycode\sms\SmsVerifyCode;
use think\facade\View;
use app\index\validate\Login as LoginValidate;
use app\common\model\User as UserModel;

class Login extends Base
{
    protected $noNeedLogin = ['*'];
    protected $noNeedRight = ['*'];
    
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }
    public function mail()
    {
        $verifyCode = new MailVerifyCode();

        $res = $verifyCode->sendVerifyCodeMail('644600727@qq.com');
        dump($res);
        halt($verifyCode->getResultData());
    }

    public function register(SmsVerifyCode $sms, MailVerifyCode $mail, LoginValidate $validate, LoginLogic $login)
    {
        if($this->request->isPost())
        {
            $param = $this->request->param();

            //规则校验
            $check = $validate->scene('register')->check($param);
            if(!$check)
                return $this->error($validate->getError());


            //邮件校验
            if($this->config['register']['mail_verify'])
            {
                $res = $mail->checkMailVerifyCode($param['mail_token'], $param['mail_code'], $param['email']);
                if(!$res)
                    return $mail->getResultData();
                $param['email_status'] = 1;
            }
            //手机验证码校验
            if($this->config['register']['sms_verify'])
            {
                $res = $sms->checkSmsVerifyCode($param['sms_token'], $param['sms_code'], $param['mobile']);
                if(!$res)
                    return $sms->getResultData();
                $param['mobile_status'] = 1;
            }

            $param['ip'] = $this->request->ip();
            $res = $login->register($param);
            if($res)
                return $this->success('注册成功', 200, [], 'login');
            else
                return $this->error('注册失败');

        }
        else
        {
            return View::fetch();
        }

    }

    public function login(LoginLogic $login)
    {
        //已经登录过了
        if($login->isLogin($this->user))
        {
            $this->redirect('index/index');
        }

        $captchaType = $this->getConfig('index.login.captcha');
        if($this->request->isPost())
        {
            $param = $this->request->param();

            //验证码校验
            switch ($captchaType)
            {
                case 'image'://图片验证码
                    if(!captcha_check($param['captcha']))
                        return $this->error('验证码错误');
                    break;
                case 'slide'://滑块验证码
                    break;
                default://未开启验证码
                    break;
            }

            $remember=false;
            if(isset($param['remember'] ) && $param['remember']  =='on')
                $remember = true;

            $res = $login->login($param['username'], $param['password'], $remember);
            if($res)
            {
                //判断跳转，需要记录一下退出登录前的url
                if(isset($param['redirect']) && $param['redirect'] != '')
                    $url = $param['redirect'];
                else
                    $url = 'index/index';

                return $this->success('登录中...',200,[], $url, false);
            }
            else
                return $this->error($login->getError());
        }
        else
        {
            $url = $this->request->request('url', '', );
            //判断来源
            $referer = $this->request->server('HTTP_REFERER');
            if (!$url && $referer && !preg_match("/(user\/login|user\/register|user\/logout)/i", $referer)) {
                $url = $referer;
            }
            View::assign([
                'captchaType'=>$captchaType,
                'url'=>$url,
            ]);
            return View::fetch();
        }


    }
    public function regsms(SmsVerifyCode $sms, LoginValidate $validate)
    {
        $param = $this->request->param();
        if(!isset($param['captcha']) || !captcha_check($param['captcha']))
        {
            return $this->error('验证码错误', 10008);
        }
        //注册手机号规则校验
        $check = $validate->scene('regsms')->check($param);
        if(!$check)
            return $this->error($validate->getError());

        $phoneNumber = $param['mobile'];
        $sms->sendRegisterSms($phoneNumber);
        return $sms->getResultData();
    }
    public function regmail(MailVerifyCode $mail, LoginValidate $validate)
    {
        $param = $this->request->param();
        if(!isset($param['captcha']) || !captcha_check($param['captcha']))
        {
            return $this->error('验证码错误', 10008);
        }
        //注册手机号规则校验
        $check = $validate->scene('regmail')->check($param);
        if(!$check)
            return $this->error($validate->getError());

        $mailAddress = $param['email'];
        $mail->sendVerifyCodeMail($mailAddress);
        return $mail->getResultData();
    }
    public function checkSms(SmsVerifyCode $sms)
    {
        $param = $this->request->param();
        $phoneNumber = $param['mobile'];
        $code = $param['code'];
        $token = $param['smstoken'];
        $res = $sms->checkSmsVerifyCode($token, $code, $phoneNumber);
        return $sms->getResultData();
    }

    public function test(SmsVerifyCode $sms)
    {
        //验证码校验
        $res = $sms->checkSmsVerifyCode('50f9f1ecbbe84263c90bb142c30ca3cb', '523746', '644600727@qq.com');
        halt($res);
    }

    public function logout(LoginLogic $login)
    {
        $login->logout();
        return $this->success('退出成功', 200, [], URL_RELOAD, false);
    }
}